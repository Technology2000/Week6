class MyCircularDeque {
     Node head;
    Node tail;
     int count;
    int size;
      class Node{
          int data;
          Node next;
          Node prev;
           public Node(int val){
               data=val;
               next=null;
               prev=null;
           }
      }
    public MyCircularDeque(int k) {
       size=k;
        count=0;
        head=null;
        tail=null;
    }
    public boolean insertFront(int value) {
         Node node=new Node(value);
       if(isFull())
       return false;
        else if(head!=null){
             head.prev=node;
             node.next=head;
        }
        head=node;
        if(tail==null){
            tail=head;
        }
        count++;
        return true;
    }
    public boolean insertLast(int value) {
        Node node=new Node(value);
            if(isFull())
                return false;
        else if(tail!=null){
           tail.next=node;
            node.prev=tail;
        }
        tail=node;
        if(head==null){
            head=tail;
        }
        count++;
        return true;
    }
    public boolean deleteFront() {
          if(isEmpty())
              return false;
        else if(count==1){
           head=null;
            tail=null;
            count--;
            return true;
        }
            else{
                head=head.next;
                count--;
                return true;
            }
    }
    public boolean deleteLast() {
        if(isEmpty())
            return false;
        else if(count==1){
           head=null;
            tail=null;
            count--;
            return true;
        }
        else{
            tail=tail.prev;
            count--;
        return true;
    }
    }
    public int getFront() {
        if(head!=null)
            return head.data;
            return -1;
    }
        
    public int getRear() {
        if(tail!=null)
            return tail.data;
        return -1;
    }
    public boolean isEmpty() {
       return count==0;
    }
    public boolean isFull() {
        return count==size;
    }
}
